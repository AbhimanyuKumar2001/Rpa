Quiz Answers 2904
---------------
selector is used to display the table with zebra-stripe pattern.
nth-child()

body {background-color: hsla(220, 20%, 30%, .3);}   

Answer 1
Hue Saturation Lightness Alpha
h4 {color: yellow ;} 

Answer 2
Color Keywords
p {color: rgb(100, 100, 100);}   

Answer 3
Red Green Blue
h2 {color: #000ff0;}    

Answer 4
Hexa Decimal



Specify the default value of the HTML5 color picker, in 6 digit hex value : 
#FF0000

ul{
    margin: 0;
    padding: 0;
    list-style-type: none;
}

The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.


Create a variable called z, assign x + y to it, and display the result in an alert box.
var x = 5;
var y = 10;
 blank   blank = x + y;
 blank (z);

     















CUSTOMER's street  | -- modified(correct ans)
-------------------+
SELECT CUSTOMER_NAME, SUBSTRING_INDEX(ADDRESS, ',', 1) AS STREET
FROM CUSTOMER
WHERE EMAIL_ID IS NOT NULL 
ORDER BY STREET DESC;






Patient Appointment Details   |
------------------------------+


  SELECT DISTINCT CONCAT(p_first_name," ","has an appointment with Dr.",dr_first_name," ") AS Appointment_Info 
  FROM patient p
  JOIN appointment a ON p.patient_id=a.patient_id 
  JOIN doctor d ON a.doctor_id=d.doctor_id
  ORDER BY Appointment_Info desc







Flying Barbeque   |
-------------------
using System;

public class Table
{
    public string CustomerName { get; set; }
    public string DateAndTime { get; set; }
    public int VegCount { get; set; }
    public int NonVegCount { get; set; }
    public string Occasion { get; set; }
}

public class Service : Table
{
    public bool ValidateOccasion()
    {
        return (Occasion == "Birthday" || Occasion == "Anniversary" || Occasion == "Office Party");
    }

    public double[] BookTable()
    {
        double priceForVeg = 800;
        double priceForNonVeg = 1000;
        double discountPercentage = 0;

        switch (Occasion)
        {
            case "Birthday":
                discountPercentage = 0.10;
                break;
            case "Anniversary":
                discountPercentage = 0.15;
                break;
            case "Office Party":
                discountPercentage = 0.25;
                break;
        }

        double price = (VegCount * priceForVeg) + (NonVegCount * priceForNonVeg);
        double discount = price * discountPercentage;
        double discountedPrice = price - discount;

        return new double[] { price, discount, discountedPrice };
    }
}





***Table file**


using System;

public class Table
{
    public string CustomerName { get; set; }
    public string DateAndTime { get; set; }
    public int VegCount { get; set; }
    public int NonVegCount { get; set; }
    public string Occasion { get; set; }
}

public class Service : Table
{
    public bool ValidateOccasion()
    {
        return (Occasion == "Birthday" || Occasion == "Anniversary" || Occasion == "Office Party");
    }

    public double[] BookTable()
    {
        double priceForVeg = 800;
        double priceForNonVeg = 1000;
        double discountPercentage = 0;

        switch (Occasion)
        {
            case "Birthday":
                discountPercentage = 0.10;
                break;
            case "Anniversary":
                discountPercentage = 0.15;
                break;
            case "Office Party":
                discountPercentage = 0.25;
                break;
        }

        double price = (VegCount * priceForVeg) + (NonVegCount * priceForNonVeg);
        double discount = price * discountPercentage;
        double discountedPrice = price - discount;

        return new double[] { price, discount, discountedPrice };
    }
}

h



Future Wings   |
---------------+
main method

 Console.WriteLine("Enter the name");
        string name = Console.ReadLine();

        Console.WriteLine("Enter the marks");
        double marks = Convert.ToDouble(Console.ReadLine());

        Service student = new Service()
        {
            StudentName = name,
            Marks = marks
        };

        if (student.CalculatePercentage())
        {
            Console.WriteLine($"Your percentage is {student.Percentage}\nAvailable group:\n");
            string[] groups = student.FindGroup();
            foreach (var group in groups)
            {
                Console.WriteLine(group);
            }
        }
        else
        {
            Console.WriteLine("Invalid Marks");
        }
        }
        
  student.cs      
     public string StudentName { get; set; }
    public double Marks { get; set; }
    public double Percentage { get; set; }    
   
        service.cs
        
         public class Service : Student   //DO NOT change the class name
    {
        //Implement your code here
        public bool CalculatePercentage()
    {
        if (Marks >= 200 && Marks <= 500)
        {
            Percentage = (Marks / 500) * 100;
            return true;
        }
        else
        {
            return false;
        }
    }

    public string[] FindGroup()
    {
        string[] groups;

        if (Percentage >= 90)
        {
            groups = new string[] { "Science", "Computer Science", "Arts", "Accounts" };
        }
        else if (Percentage >= 80 && Percentage < 90)
        {
            groups = new string[] { "Computer Science", "Arts", "Accounts" };
        }
        else if (Percentage >= 70 && Percentage < 80)
        {
            groups = new string[] { "Arts", "Accounts" };
        }
        else
        {
            groups = new string[] { "Accounts" };
        }

        return groups;
    }






Madoff's  Minions  |
-------------------+


using System;
using System.Collections.Generic; 
using System.Linq; using System.Collections; 
public class Program  
{  

    public static Dictionary<string,float> empDictionary=new Dictionary<string,float>();
    public static void Main(string[] args)  

    {  

        empDictionary.Add("EMP101",2.5f);   
        empDictionary.Add("EMP102",4.3f); 
        empDictionary.Add("EMP103",5.0f); 
        empDictionary.Add("EMP104",3.4f); 
        empDictionary.Add("EMP105",6.0f); 
        Program pr=new Program();     
        while(true)  

        {  

            Console.WriteLine("Enter your choice");  

            Console.WriteLine("1. Find Employee Rating\n2. Find Employee With Highest Rating\n3. Sort Employees By Rating\n4. Exit");     
            int choice=int.Parse(Console.ReadLine());          
            switch(choice)  

            {        
                case 1:  

                    Console.WriteLine("Enter the employee id"); 
                    string k=Console.ReadLine();     
                    float res=pr.FindEmployeeRating(k);  

                    if(res==-1){  

                        Console.WriteLine("Invalid employee id");  
                     }     
                    else{  

                        Console.WriteLine("Rating is : "+res);  
                      }     
                    break;
                    case 2:  

                        Console.WriteLine("Enter the Rating");     
                        float rating=float.Parse(Console.ReadLine());  

                        List<string> list=pr.FindEmployeeWithHighestRating(rating);  

                        if(list.Count>0){  

                                   foreach(string item in list){  

                                               Console.WriteLine(item);  

                                          }              
                            }              
                            else{  

                            Console.WriteLine("No highest rating employees found");  
                         }  

                        break;    
                        case 3:  

                        Dictionary<string,float> mydict=pr.SortByRating();    
                        Console.WriteLine("EmployeeId\tRating");       
                        foreach(var item in mydict){  

                            Console.WriteLine($"{item.Key}\t\t{item.Value}");  

                        }                   
                        break;             
                        case 4:  

                        Console.WriteLine("Thank you");  

                        return;  

            }  

              

        }  

          

    }  

    public float FindEmployeeRating(string empid){  

        float res1=-1;  

        foreach(var item in empDictionary){  

            if(item.Key==empid){  

                res1=item.Value;  

            }  

        }  

        return res1;  

  

    }  

    public List<string> FindEmployeeWithHighestRating(float rating){  

        List<string> k=new List<string>();
        foreach(var item in empDictionary)  

        {  

            if(rating==item.Value){  

                k.Add(item.Key);  

            }  

        }  

        return k;  

    }  

    public Dictionary<string,float> SortByRating(){  

        return empDictionary.OrderByDescending(c=>c.Value).ToDictionary(a=>a.Key,a=>a.Value);  

    }  

}






















